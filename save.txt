	// TODO: Add your control notification handler code here

	HVSTATUS status = STATUS_OK;


	BYTE *pRawBuffer = new BYTE[HV_Width  * HV_Height];
	assert(pRawBuffer);

	/*
		分配Bayer转换后图像数据缓冲
	*/
	BYTE *pImageBuffer = new BYTE[HV_Width  * HV_Height * 3];
	assert(pImageBuffer);

	//分配BITMAPINFO缓冲
	BYTE *pInfoBuffer = new BYTE[sizeof(BITMAPINFO)];
	assert(pInfoBuffer);

    //定义一个位图结构，用来保存位图数据
    Graphics::TBitmap *Bmp = new Graphics::TBitmap();
    Bmp->Width = HV_Width;
    Bmp->Height = HV_Height;
    Bmp->PixelFormat = pf24bit;

	/*
	 *	初始化BITMAPINFO 结构，此结构在保存bmp文件信息、保存采集图像时使用
	 */
	BITMAPINFO *pBmpInfo				= (BITMAPINFO *)pInfoBuffer;
	pBmpInfo->bmiHeader.biSize			= sizeof(BITMAPINFOHEADER);
	// 	图像宽度，一般为输出窗口宽度
	pBmpInfo->bmiHeader.biWidth		= HV_Width ;
	//	图像宽度，一般为输出窗口高度
	pBmpInfo->bmiHeader.biHeight		= HV_Height;
	//	图像位深度，数字摄像机采集的原始数据为8位，Bayer转换后为24位
	pBmpInfo->bmiHeader.biBitCount		= 24;
	//	以下设置一般相同，对于低于8位的位图，还应设置相应的位图调色板
	pBmpInfo->bmiHeader.biPlanes		= 1;
	pBmpInfo->bmiHeader.biCompression	= BI_RGB;
	pBmpInfo->bmiHeader.biSizeImage		= 0;
	pBmpInfo->bmiHeader.biXPelsPerMeter	= 0;
	pBmpInfo->bmiHeader.biYPelsPerMeter	= 0;
	pBmpInfo->bmiHeader.biClrUsed		= 0;
	pBmpInfo->bmiHeader.biClrImportant	= 0;

	// 	采集1帧图像到内存，采集完成后停止
	BYTE *ppBuf[1];
	ppBuf[0] = pRawBuffer;
	status = HVSnapShot(m_hhv, ppBuf,1);
	HV_VERIFY(status);

	if (HV_SUCCESS(status))
         {
                //颜色查找表
                BYTE pLutR[256];
                BYTE pLutG[256];
                BYTE pLutB[256];
                for(int i=0;i<256;i++)
                {
                        pLutR[i] = i;
                        pLutG[i] = i;
                        pLutB[i] = i;

                }
		//	将原始图像数据进行Bayer转换，转换后为24位。
                //同时将原始数据进行上下翻转
	     ConvertBayer2Rgb(pImageBuffer,pRawBuffer,HV_Width,HV_Height,ConvertType,pLutR,pLutG,pLutB,true,Layout);

		/*	
		 *	以下保存BMP文件
		 */
                SaveDialog1->Filter =  "Bitmap Files(*.bmp)|*.bmp";
                SaveDialog1->DefaultExt = "bmp" ;

                if(SaveDialog1->Execute())
                {
            
                        SetStretchBltMode(Bmp->Canvas->Handle, COLORONCOLOR);
                        //将图像数据保存到位图结构
                        SetDIBitsToDevice(Bmp->Canvas->Handle, 0, 0, Bmp->Width, Bmp->Height,
                                0, 0, 0, pBmpInfo->bmiHeader.biHeight,
                        pRawBuffer, pBmpInfo, DIB_RGB_COLORS);

                        //将图像数据保存到文件
                        Bmp->SaveToFile(SaveDialog1->FileName.c_str());

		}
	}

    //释放内存
	delete []pRawBuffer;	
	delete []pImageBuffer;	
	delete []pInfoBuffer;
    delete Bmp;

	//	关闭数字摄像机1
	status = EndHVDevice(m_hhv);
	HV_VERIFY(status);